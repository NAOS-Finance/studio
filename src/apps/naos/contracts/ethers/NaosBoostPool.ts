/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface NaosBoostPoolInterface extends utils.Interface {
  functions: {
    'CLAIM_PERIOD()': FunctionFragment;
    'PERCENT_RESOLUTION()': FunctionFragment;
    'acceptGovernance()': FunctionFragment;
    'claim()': FunctionFragment;
    'claimImmediately()': FunctionFragment;
    'cooldownPeriod()': FunctionFragment;
    'deposit(uint256,uint256)': FunctionFragment;
    'donateReward(uint256)': FunctionFragment;
    'getLockTimeWeightedByIndex(uint256)': FunctionFragment;
    'getLockTimeWeightedListLength()': FunctionFragment;
    'getPoolToken()': FunctionFragment;
    'getPoolTotalDeposited()': FunctionFragment;
    'getPoolTotalDepositedWeight()': FunctionFragment;
    'getStakeTotalDeposited(address)': FunctionFragment;
    'getStakeTotalDepositedWeight(address)': FunctionFragment;
    'getStakeTotalUnclaimed(address)': FunctionFragment;
    'getStakeTotalUnclaimedImmediately(address)': FunctionFragment;
    'getUserClaimPeriod(address)': FunctionFragment;
    'getUserDepositOrderByIndex(address,uint256)': FunctionFragment;
    'getUserOrderCount(address)': FunctionFragment;
    'governance()': FunctionFragment;
    'penaltyPercent()': FunctionFragment;
    'pendingGovernance()': FunctionFragment;
    'reward()': FunctionFragment;
    'rewardRate()': FunctionFragment;
    'setCooldown(uint256)': FunctionFragment;
    'setLockTimeWeighted(uint256,uint256)': FunctionFragment;
    'setPenaltyPercent(uint256)': FunctionFragment;
    'setPendingGovernance(address)': FunctionFragment;
    'setRewardRate(uint256)': FunctionFragment;
    'startCoolDown()': FunctionFragment;
    'userCooldown(address)': FunctionFragment;
    'userDepositedOrder(address,uint256)': FunctionFragment;
    'userOrderCount(address)': FunctionFragment;
    'withdraw(uint256[])': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'CLAIM_PERIOD'
      | 'PERCENT_RESOLUTION'
      | 'acceptGovernance'
      | 'claim'
      | 'claimImmediately'
      | 'cooldownPeriod'
      | 'deposit'
      | 'donateReward'
      | 'getLockTimeWeightedByIndex'
      | 'getLockTimeWeightedListLength'
      | 'getPoolToken'
      | 'getPoolTotalDeposited'
      | 'getPoolTotalDepositedWeight'
      | 'getStakeTotalDeposited'
      | 'getStakeTotalDepositedWeight'
      | 'getStakeTotalUnclaimed'
      | 'getStakeTotalUnclaimedImmediately'
      | 'getUserClaimPeriod'
      | 'getUserDepositOrderByIndex'
      | 'getUserOrderCount'
      | 'governance'
      | 'penaltyPercent'
      | 'pendingGovernance'
      | 'reward'
      | 'rewardRate'
      | 'setCooldown'
      | 'setLockTimeWeighted'
      | 'setPenaltyPercent'
      | 'setPendingGovernance'
      | 'setRewardRate'
      | 'startCoolDown'
      | 'userCooldown'
      | 'userDepositedOrder'
      | 'userOrderCount'
      | 'withdraw',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'CLAIM_PERIOD', values?: undefined): string;
  encodeFunctionData(functionFragment: 'PERCENT_RESOLUTION', values?: undefined): string;
  encodeFunctionData(functionFragment: 'acceptGovernance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'claim', values?: undefined): string;
  encodeFunctionData(functionFragment: 'claimImmediately', values?: undefined): string;
  encodeFunctionData(functionFragment: 'cooldownPeriod', values?: undefined): string;
  encodeFunctionData(functionFragment: 'deposit', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'donateReward', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getLockTimeWeightedByIndex', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getLockTimeWeightedListLength', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPoolToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPoolTotalDeposited', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getPoolTotalDepositedWeight', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getStakeTotalDeposited', values: [string]): string;
  encodeFunctionData(functionFragment: 'getStakeTotalDepositedWeight', values: [string]): string;
  encodeFunctionData(functionFragment: 'getStakeTotalUnclaimed', values: [string]): string;
  encodeFunctionData(functionFragment: 'getStakeTotalUnclaimedImmediately', values: [string]): string;
  encodeFunctionData(functionFragment: 'getUserClaimPeriod', values: [string]): string;
  encodeFunctionData(functionFragment: 'getUserDepositOrderByIndex', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getUserOrderCount', values: [string]): string;
  encodeFunctionData(functionFragment: 'governance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'penaltyPercent', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingGovernance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'reward', values?: undefined): string;
  encodeFunctionData(functionFragment: 'rewardRate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setCooldown', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setLockTimeWeighted', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setPenaltyPercent', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setPendingGovernance', values: [string]): string;
  encodeFunctionData(functionFragment: 'setRewardRate', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'startCoolDown', values?: undefined): string;
  encodeFunctionData(functionFragment: 'userCooldown', values: [string]): string;
  encodeFunctionData(functionFragment: 'userDepositedOrder', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'userOrderCount', values: [string]): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish[]]): string;

  decodeFunctionResult(functionFragment: 'CLAIM_PERIOD', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'PERCENT_RESOLUTION', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'acceptGovernance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimImmediately', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cooldownPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'donateReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLockTimeWeightedByIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLockTimeWeightedListLength', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolTotalDeposited', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPoolTotalDepositedWeight', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getStakeTotalDeposited', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getStakeTotalDepositedWeight', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getStakeTotalUnclaimed', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getStakeTotalUnclaimedImmediately', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserClaimPeriod', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserDepositOrderByIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserOrderCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'governance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'penaltyPercent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingGovernance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rewardRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCooldown', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setLockTimeWeighted', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPenaltyPercent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setPendingGovernance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRewardRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'startCoolDown', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userCooldown', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userDepositedOrder', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userOrderCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'CooldownPeriodUpdated(uint256)': EventFragment;
    'CooldownStart(address,uint256,uint256)': EventFragment;
    'GovernanceUpdated(address)': EventFragment;
    'LockTimeWeightedSet(uint256,uint256)': EventFragment;
    'PenaltyPercentUpdated(uint256)': EventFragment;
    'PendingGovernanceUpdated(address)': EventFragment;
    'RewardRateUpdated(uint256)': EventFragment;
    'TokensClaimed(address,uint256)': EventFragment;
    'TokensDeposited(address,uint256,uint256)': EventFragment;
    'TokensWithdrawn(address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'CooldownPeriodUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CooldownStart'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GovernanceUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LockTimeWeightedSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PenaltyPercentUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PendingGovernanceUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardRateUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokensClaimed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokensDeposited'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokensWithdrawn'): EventFragment;
}

export interface CooldownPeriodUpdatedEventObject {
  period: BigNumber;
}
export type CooldownPeriodUpdatedEvent = TypedEvent<[BigNumber], CooldownPeriodUpdatedEventObject>;

export type CooldownPeriodUpdatedEventFilter = TypedEventFilter<CooldownPeriodUpdatedEvent>;

export interface CooldownStartEventObject {
  user: string;
  claimStart: BigNumber;
  claimEnd: BigNumber;
}
export type CooldownStartEvent = TypedEvent<[string, BigNumber, BigNumber], CooldownStartEventObject>;

export type CooldownStartEventFilter = TypedEventFilter<CooldownStartEvent>;

export interface GovernanceUpdatedEventObject {
  governance: string;
}
export type GovernanceUpdatedEvent = TypedEvent<[string], GovernanceUpdatedEventObject>;

export type GovernanceUpdatedEventFilter = TypedEventFilter<GovernanceUpdatedEvent>;

export interface LockTimeWeightedSetEventObject {
  lockTime: BigNumber;
  weighted: BigNumber;
}
export type LockTimeWeightedSetEvent = TypedEvent<[BigNumber, BigNumber], LockTimeWeightedSetEventObject>;

export type LockTimeWeightedSetEventFilter = TypedEventFilter<LockTimeWeightedSetEvent>;

export interface PenaltyPercentUpdatedEventObject {
  percent: BigNumber;
}
export type PenaltyPercentUpdatedEvent = TypedEvent<[BigNumber], PenaltyPercentUpdatedEventObject>;

export type PenaltyPercentUpdatedEventFilter = TypedEventFilter<PenaltyPercentUpdatedEvent>;

export interface PendingGovernanceUpdatedEventObject {
  pendingGovernance: string;
}
export type PendingGovernanceUpdatedEvent = TypedEvent<[string], PendingGovernanceUpdatedEventObject>;

export type PendingGovernanceUpdatedEventFilter = TypedEventFilter<PendingGovernanceUpdatedEvent>;

export interface RewardRateUpdatedEventObject {
  rewardRate: BigNumber;
}
export type RewardRateUpdatedEvent = TypedEvent<[BigNumber], RewardRateUpdatedEventObject>;

export type RewardRateUpdatedEventFilter = TypedEventFilter<RewardRateUpdatedEvent>;

export interface TokensClaimedEventObject {
  user: string;
  amount: BigNumber;
}
export type TokensClaimedEvent = TypedEvent<[string, BigNumber], TokensClaimedEventObject>;

export type TokensClaimedEventFilter = TypedEventFilter<TokensClaimedEvent>;

export interface TokensDepositedEventObject {
  user: string;
  amount: BigNumber;
  weightedAmount: BigNumber;
}
export type TokensDepositedEvent = TypedEvent<[string, BigNumber, BigNumber], TokensDepositedEventObject>;

export type TokensDepositedEventFilter = TypedEventFilter<TokensDepositedEvent>;

export interface TokensWithdrawnEventObject {
  user: string;
  amount: BigNumber;
  weightedAmount: BigNumber;
}
export type TokensWithdrawnEvent = TypedEvent<[string, BigNumber, BigNumber], TokensWithdrawnEventObject>;

export type TokensWithdrawnEventFilter = TypedEventFilter<TokensWithdrawnEvent>;

export interface NaosBoostPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NaosBoostPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CLAIM_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERCENT_RESOLUTION(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptGovernance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    claim(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    claimImmediately(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    cooldownPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      _depositAmount: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    donateReward(
      _donateAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getLockTimeWeightedByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { lockTime: BigNumber; weighted: BigNumber }>;

    getLockTimeWeightedListLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPoolToken(overrides?: CallOverrides): Promise<[string]>;

    getPoolTotalDeposited(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPoolTotalDepositedWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStakeTotalDeposited(_account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getStakeTotalDepositedWeight(_account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getStakeTotalUnclaimed(_account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getStakeTotalUnclaimedImmediately(_account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserClaimPeriod(
      _account: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { claimStart: BigNumber; claimEnd: BigNumber }>;

    getUserDepositOrderByIndex(
      _account: string,
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        amount: BigNumber;
        expiredTime: BigNumber;
        weighted: BigNumber;
        isWithdraw: boolean;
      }
    >;

    getUserOrderCount(_account: string, overrides?: CallOverrides): Promise<[BigNumber] & { count: BigNumber }>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    penaltyPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingGovernance(overrides?: CallOverrides): Promise<[string]>;

    reward(overrides?: CallOverrides): Promise<[string]>;

    rewardRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    setCooldown(
      _cooldownPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setLockTimeWeighted(
      _lockTime: BigNumberish,
      _weighted: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setPenaltyPercent(
      _penaltyPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setPendingGovernance(
      _pendingGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setRewardRate(
      _rewardRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    startCoolDown(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    userCooldown(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { claimStart: BigNumber; claimEnd: BigNumber }>;

    userDepositedOrder(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        amount: BigNumber;
        expiredTime: BigNumber;
        weighted: BigNumber;
        isWithdraw: boolean;
      }
    >;

    userOrderCount(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      _index: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  CLAIM_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  PERCENT_RESOLUTION(overrides?: CallOverrides): Promise<BigNumber>;

  acceptGovernance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  claim(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  claimImmediately(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  cooldownPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    _depositAmount: BigNumberish,
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  donateReward(
    _donateAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getLockTimeWeightedByIndex(
    _index: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { lockTime: BigNumber; weighted: BigNumber }>;

  getLockTimeWeightedListLength(overrides?: CallOverrides): Promise<BigNumber>;

  getPoolToken(overrides?: CallOverrides): Promise<string>;

  getPoolTotalDeposited(overrides?: CallOverrides): Promise<BigNumber>;

  getPoolTotalDepositedWeight(overrides?: CallOverrides): Promise<BigNumber>;

  getStakeTotalDeposited(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

  getStakeTotalDepositedWeight(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

  getStakeTotalUnclaimed(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

  getStakeTotalUnclaimedImmediately(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

  getUserClaimPeriod(
    _account: string,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { claimStart: BigNumber; claimEnd: BigNumber }>;

  getUserDepositOrderByIndex(
    _account: string,
    _index: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, boolean] & {
      amount: BigNumber;
      expiredTime: BigNumber;
      weighted: BigNumber;
      isWithdraw: boolean;
    }
  >;

  getUserOrderCount(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

  governance(overrides?: CallOverrides): Promise<string>;

  penaltyPercent(overrides?: CallOverrides): Promise<BigNumber>;

  pendingGovernance(overrides?: CallOverrides): Promise<string>;

  reward(overrides?: CallOverrides): Promise<string>;

  rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

  setCooldown(
    _cooldownPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setLockTimeWeighted(
    _lockTime: BigNumberish,
    _weighted: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setPenaltyPercent(
    _penaltyPercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setPendingGovernance(
    _pendingGovernance: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setRewardRate(
    _rewardRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  startCoolDown(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  userCooldown(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { claimStart: BigNumber; claimEnd: BigNumber }>;

  userDepositedOrder(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, boolean] & {
      amount: BigNumber;
      expiredTime: BigNumber;
      weighted: BigNumber;
      isWithdraw: boolean;
    }
  >;

  userOrderCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    _index: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    CLAIM_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENT_RESOLUTION(overrides?: CallOverrides): Promise<BigNumber>;

    acceptGovernance(overrides?: CallOverrides): Promise<void>;

    claim(overrides?: CallOverrides): Promise<void>;

    claimImmediately(overrides?: CallOverrides): Promise<void>;

    cooldownPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(_depositAmount: BigNumberish, _index: BigNumberish, overrides?: CallOverrides): Promise<void>;

    donateReward(_donateAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getLockTimeWeightedByIndex(
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { lockTime: BigNumber; weighted: BigNumber }>;

    getLockTimeWeightedListLength(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolToken(overrides?: CallOverrides): Promise<string>;

    getPoolTotalDeposited(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolTotalDepositedWeight(overrides?: CallOverrides): Promise<BigNumber>;

    getStakeTotalDeposited(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getStakeTotalDepositedWeight(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getStakeTotalUnclaimed(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getStakeTotalUnclaimedImmediately(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getUserClaimPeriod(
      _account: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { claimStart: BigNumber; claimEnd: BigNumber }>;

    getUserDepositOrderByIndex(
      _account: string,
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        amount: BigNumber;
        expiredTime: BigNumber;
        weighted: BigNumber;
        isWithdraw: boolean;
      }
    >;

    getUserOrderCount(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<string>;

    penaltyPercent(overrides?: CallOverrides): Promise<BigNumber>;

    pendingGovernance(overrides?: CallOverrides): Promise<string>;

    reward(overrides?: CallOverrides): Promise<string>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    setCooldown(_cooldownPeriod: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setLockTimeWeighted(_lockTime: BigNumberish, _weighted: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setPenaltyPercent(_penaltyPercent: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setPendingGovernance(_pendingGovernance: string, overrides?: CallOverrides): Promise<void>;

    setRewardRate(_rewardRate: BigNumberish, overrides?: CallOverrides): Promise<void>;

    startCoolDown(overrides?: CallOverrides): Promise<void>;

    userCooldown(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { claimStart: BigNumber; claimEnd: BigNumber }>;

    userDepositedOrder(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        amount: BigNumber;
        expiredTime: BigNumber;
        weighted: BigNumber;
        isWithdraw: boolean;
      }
    >;

    userOrderCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(_index: BigNumberish[], overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'CooldownPeriodUpdated(uint256)'(period?: null): CooldownPeriodUpdatedEventFilter;
    CooldownPeriodUpdated(period?: null): CooldownPeriodUpdatedEventFilter;

    'CooldownStart(address,uint256,uint256)'(
      user?: string | null,
      claimStart?: null,
      claimEnd?: null,
    ): CooldownStartEventFilter;
    CooldownStart(user?: string | null, claimStart?: null, claimEnd?: null): CooldownStartEventFilter;

    'GovernanceUpdated(address)'(governance?: null): GovernanceUpdatedEventFilter;
    GovernanceUpdated(governance?: null): GovernanceUpdatedEventFilter;

    'LockTimeWeightedSet(uint256,uint256)'(lockTime?: null, weighted?: null): LockTimeWeightedSetEventFilter;
    LockTimeWeightedSet(lockTime?: null, weighted?: null): LockTimeWeightedSetEventFilter;

    'PenaltyPercentUpdated(uint256)'(percent?: null): PenaltyPercentUpdatedEventFilter;
    PenaltyPercentUpdated(percent?: null): PenaltyPercentUpdatedEventFilter;

    'PendingGovernanceUpdated(address)'(pendingGovernance?: null): PendingGovernanceUpdatedEventFilter;
    PendingGovernanceUpdated(pendingGovernance?: null): PendingGovernanceUpdatedEventFilter;

    'RewardRateUpdated(uint256)'(rewardRate?: null): RewardRateUpdatedEventFilter;
    RewardRateUpdated(rewardRate?: null): RewardRateUpdatedEventFilter;

    'TokensClaimed(address,uint256)'(user?: string | null, amount?: null): TokensClaimedEventFilter;
    TokensClaimed(user?: string | null, amount?: null): TokensClaimedEventFilter;

    'TokensDeposited(address,uint256,uint256)'(
      user?: string | null,
      amount?: null,
      weightedAmount?: null,
    ): TokensDepositedEventFilter;
    TokensDeposited(user?: string | null, amount?: null, weightedAmount?: null): TokensDepositedEventFilter;

    'TokensWithdrawn(address,uint256,uint256)'(
      user?: string | null,
      amount?: null,
      weightedAmount?: null,
    ): TokensWithdrawnEventFilter;
    TokensWithdrawn(user?: string | null, amount?: null, weightedAmount?: null): TokensWithdrawnEventFilter;
  };

  estimateGas: {
    CLAIM_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENT_RESOLUTION(overrides?: CallOverrides): Promise<BigNumber>;

    acceptGovernance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    claim(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    claimImmediately(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    cooldownPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _depositAmount: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    donateReward(
      _donateAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getLockTimeWeightedByIndex(_index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getLockTimeWeightedListLength(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolToken(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolTotalDeposited(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolTotalDepositedWeight(overrides?: CallOverrides): Promise<BigNumber>;

    getStakeTotalDeposited(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getStakeTotalDepositedWeight(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getStakeTotalUnclaimed(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getStakeTotalUnclaimedImmediately(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getUserClaimPeriod(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getUserDepositOrderByIndex(_account: string, _index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getUserOrderCount(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    penaltyPercent(overrides?: CallOverrides): Promise<BigNumber>;

    pendingGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    reward(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    setCooldown(
      _cooldownPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setLockTimeWeighted(
      _lockTime: BigNumberish,
      _weighted: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setPenaltyPercent(
      _penaltyPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setPendingGovernance(
      _pendingGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setRewardRate(
      _rewardRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    startCoolDown(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    userCooldown(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userDepositedOrder(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    userOrderCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(_index: BigNumberish[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    CLAIM_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERCENT_RESOLUTION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptGovernance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    claim(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    claimImmediately(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    cooldownPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _depositAmount: BigNumberish,
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    donateReward(
      _donateAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getLockTimeWeightedByIndex(_index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLockTimeWeightedListLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolTotalDeposited(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolTotalDepositedWeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStakeTotalDeposited(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStakeTotalDepositedWeight(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStakeTotalUnclaimed(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStakeTotalUnclaimedImmediately(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserClaimPeriod(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserDepositOrderByIndex(
      _account: string,
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getUserOrderCount(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    penaltyPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingGovernance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCooldown(
      _cooldownPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setLockTimeWeighted(
      _lockTime: BigNumberish,
      _weighted: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setPenaltyPercent(
      _penaltyPercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setPendingGovernance(
      _pendingGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setRewardRate(
      _rewardRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    startCoolDown(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    userCooldown(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userDepositedOrder(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userOrderCount(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _index: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
